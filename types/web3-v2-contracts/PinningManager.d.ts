/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions, EventOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, ContractEvent, TransactionObject } from "./types";

export class PinningManager extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): PinningManager;
  methods: {
    offerRegistry(
      arg0: string
    ): TransactionObject<{
      capacity: BN;
      maximumDuration: BN;
      0: BN;
      1: BN;
    }>;

    setStorageOffer(
      capacity: number | string,
      maximumDuration: number | string,
      periods: (number | string)[],
      pricesForPeriods: (number | string)[],
      message: (string | number[])[]
    ): TransactionObject<void>;

    increaseStorageCapacity(increase: number | string): TransactionObject<void>;

    decreaseStorageCapacity(decrease: number | string): TransactionObject<void>;

    stopStorage(): TransactionObject<void>;

    setStoragePrice(
      periods: (number | string)[],
      pricesForPeriods: (number | string)[]
    ): TransactionObject<void>;

    setMaximumDuration(
      maximumDuration: number | string
    ): TransactionObject<void>;

    emitMessage(message: (string | number[])[]): TransactionObject<void>;

    newRequest(
      fileReference: (string | number[])[],
      provider: string,
      size: number | string,
      period: number | string
    ): TransactionObject<void>;

    topUpRequest(
      fileReference: (string | number[])[],
      provider: string
    ): TransactionObject<void>;

    stopRequestDuring(
      fileReference: (string | number[])[],
      provider: string
    ): TransactionObject<void>;

    withdrawEarnings(
      requestReferences: (string | number[])[]
    ): TransactionObject<void>;

    getRequestReference(
      fileReference: (string | number[])[]
    ): TransactionObject<string>;
  };
  events: {
    CapacitySet: ContractEvent<{
      storer: string;
      capacity: BN;
      0: string;
      1: BN;
    }>;
    EarningsWithdrawn: ContractEvent<string>;
    MaximumDurationSet: ContractEvent<{
      storer: string;
      maximumDuration: BN;
      0: string;
      1: BN;
    }>;
    MessageEmitted: ContractEvent<{
      storer: string;
      message: string[];
      0: string;
      1: string[];
    }>;
    PriceSet: ContractEvent<{
      storer: string;
      period: BN;
      price: BN;
      0: string;
      1: BN;
      2: BN;
    }>;
    RequestMade: ContractEvent<{
      requestReference: string;
      fileReference: string[];
      requester: string;
      provider: string;
      size: BN;
      period: BN;
      deposited: BN;
      0: string;
      1: string[];
      2: string;
      3: string;
      4: BN;
      5: BN;
      6: BN;
    }>;
    RequestStopped: ContractEvent<string>;
    RequestTopUp: ContractEvent<{
      requestReference: string;
      deposited: BN;
      0: string;
      1: BN;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
