/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import { BigNumber } from "bignumber.js";

export interface PinningManagerContract
  extends Truffle.Contract<PinningManagerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PinningManagerInstance>;
}

export interface PinningManagerInstance extends Truffle.ContractInstance {
  offerRegistry(
    arg0: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  setStorageOffer: {
    (
      capacity: number | BigNumber | string,
      maximumDuration: number | BigNumber | string,
      periods: (number | BigNumber | string)[],
      pricesForPeriods: (number | BigNumber | string)[],
      message: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      capacity: number | BigNumber | string,
      maximumDuration: number | BigNumber | string,
      periods: (number | BigNumber | string)[],
      pricesForPeriods: (number | BigNumber | string)[],
      message: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      capacity: number | BigNumber | string,
      maximumDuration: number | BigNumber | string,
      periods: (number | BigNumber | string)[],
      pricesForPeriods: (number | BigNumber | string)[],
      message: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      capacity: number | BigNumber | string,
      maximumDuration: number | BigNumber | string,
      periods: (number | BigNumber | string)[],
      pricesForPeriods: (number | BigNumber | string)[],
      message: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseStorageCapacity: {
    (
      increase: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      increase: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      increase: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      increase: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decreaseStorageCapacity: {
    (
      decrease: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      decrease: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      decrease: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      decrease: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  stopStorage: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setStoragePrice: {
    (
      periods: (number | BigNumber | string)[],
      pricesForPeriods: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      periods: (number | BigNumber | string)[],
      pricesForPeriods: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      periods: (number | BigNumber | string)[],
      pricesForPeriods: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      periods: (number | BigNumber | string)[],
      pricesForPeriods: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMaximumDuration: {
    (
      maximumDuration: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      maximumDuration: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      maximumDuration: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      maximumDuration: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  emitMessage: {
    (
      message: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      message: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      message: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      message: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  newRequest: {
    (
      fileReference: (string | BigNumber)[],
      provider: string | BigNumber,
      size: number | BigNumber | string,
      period: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      fileReference: (string | BigNumber)[],
      provider: string | BigNumber,
      size: number | BigNumber | string,
      period: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      fileReference: (string | BigNumber)[],
      provider: string | BigNumber,
      size: number | BigNumber | string,
      period: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      fileReference: (string | BigNumber)[],
      provider: string | BigNumber,
      size: number | BigNumber | string,
      period: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  topUpRequest: {
    (
      fileReference: (string | BigNumber)[],
      provider: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      fileReference: (string | BigNumber)[],
      provider: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      fileReference: (string | BigNumber)[],
      provider: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      fileReference: (string | BigNumber)[],
      provider: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  stopRequestDuring: {
    (
      fileReference: (string | BigNumber)[],
      provider: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      fileReference: (string | BigNumber)[],
      provider: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      fileReference: (string | BigNumber)[],
      provider: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      fileReference: (string | BigNumber)[],
      provider: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawEarnings: {
    (
      requestReferences: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      requestReferences: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      requestReferences: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      requestReferences: (string | BigNumber)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getRequestReference(
    fileReference: (string | BigNumber)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}
